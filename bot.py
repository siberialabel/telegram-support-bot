import logging
import json
import os
from datetime import datetime, timedelta
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
    PicklePersistence
)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
CONFIG = {
    'TOKEN': '8087173732:AAEEPd4j_krBy4-vzDiH3MCvmDWvIYA6AZU',
    'ADMIN_ID': 8114620763,
    'DATABASE_FILE': 'bot_data.json',
    'LOG_FILE': 'bot.log',
    'REPORT_COOLDOWN': 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Ä–µ–ø–æ—Ä—Ç–∞–º–∏
}

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–ù–ì–ê ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler(CONFIG['LOG_FILE']),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- –ö–õ–ê–°–° –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• ---
class Database:
    def __init__(self):
        self.data = {
            'users': {},
            'reports': {},
            'stats': {
                'total_reports': 0,
                'resolved_reports': 0
            },
            'settings': {
                'auto_respond': True,
                'notify_new_users': True
            },
            'banned_users': {}
        }
        self.load()
    
    def load(self):
        if os.path.exists(CONFIG['DATABASE_FILE']):
            with open(CONFIG['DATABASE_FILE'], 'r') as f:
                self.data = json.load(f)
    
    def save(self):
        with open(CONFIG['DATABASE_FILE'], 'w') as f:
            json.dump(self.data, f, indent=2)

db = Database()

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def get_main_keyboard(is_admin=False):
    buttons = [
        ["üÜò –ü–æ–º–æ—â—å", "‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç"],
        ["üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
    ]
    if is_admin:
        buttons.append(["üëÆ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def get_admin_keyboard():
    return ReplyKeyboardMarkup([
        ["üì® –†–µ–ø–æ—Ä—Ç—ã", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
        ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ], resize_keyboard=True)

def get_settings_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(
                "‚úÖ –ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç—ã" if db.data['settings']['auto_respond'] else "‚ùå –ê–≤—Ç–æ-–æ—Ç–≤–µ—Ç—ã",
                callback_data="toggle_auto_respond"
            )
        ],
        [
            InlineKeyboardButton(
                "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if db.data['settings']['notify_new_users'] else "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                callback_data="toggle_notify_new_users"
            )
        ]
    ])

def get_report_actions(report_id):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üì© –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{report_id}"),
            InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"resolve_{report_id}")
        ],
        [
            InlineKeyboardButton("üö∑ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"ban_{report_id}"),
            InlineKeyboardButton("üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{report_id}")
        ]
    ])

# --- –£–¢–ò–õ–ò–¢–´ ---
async def is_admin(user_id):
    return user_id == CONFIG['ADMIN_ID']

async def update_user(user):
    db.data['users'][str(user.id)] = {
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name,
        'last_activity': datetime.now().isoformat(),
        'reports_sent': db.data['users'].get(str(user.id), {}).get('reports_sent', 0),
        'is_banned': False
    }
    db.save()

async def can_send_report(user_id):
    user_id = str(user_id)
    for report in db.data['reports'].values():
        if report['user_id'] == user_id:
            report_time = datetime.fromisoformat(report['timestamp'])
            if (datetime.now() - report_time) < timedelta(seconds=CONFIG['REPORT_COOLDOWN']):
                return False
    return True

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        await update.message.reply_text("‚ÑπÔ∏è –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –õ–°!")
        return
    
    user = update.effective_user
    await update_user(user)
    
    if await is_admin(user.id):
        text = "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!"
    else:
        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–ø–æ—Ä—Ç, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã."
        )
    
    await update.message.reply_text(text, reply_markup=get_main_keyboard(await is_admin(user.id)))

async def show_help(update: Update):
    help_text = (
        "üÜò *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ *‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç* –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã\n"
        "‚Ä¢ *üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –≤–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def show_user_stats(update: Update):
    user = update.effective_user
    stats = db.data['users'].get(str(user.id), {})
    stats_text = (
        f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–ø–æ—Ä—Ç–æ–≤: {stats.get('reports_sent', 0)}\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats.get('last_activity', '–Ω–∏–∫–æ–≥–¥–∞')}\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if str(user.id) in db.data['banned_users'] else 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω'}"
    )
    await update.message.reply_text(stats_text, parse_mode="Markdown")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–ü–û–†–¢–û–í ---
async def start_report(update: Update):
    user = update.effective_user
    if not await can_send_report(user.id):
        cooldown = CONFIG['REPORT_COOLDOWN'] // 60
        await update.message.reply_text(f"‚è≥ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–ø–æ—Ä—Ç—ã —Ä–∞–∑ –≤ {cooldown} –º–∏–Ω—É—Ç!")
        return
    
    await update.message.reply_text(
        "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:\n\n"
        "‚Ä¢ –ë—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –¥–µ—Ç–∞–ª–∏\n"
        "‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    context.user_data['awaiting_report'] = True

async def process_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    report_id = len(db.data['reports']) + 1
    
    db.data['reports'][str(report_id)] = {
        'id': report_id,
        'user_id': str(user.id),
        'text': update.message.text,
        'timestamp': datetime.now().isoformat(),
        'status': 'open'
    }
    db.data['users'][str(user.id)]['reports_sent'] += 1
    db.data['stats']['total_reports'] += 1
    db.save()
    
    if await is_admin(CONFIG['ADMIN_ID']):
        await context.bot.send_message(
            CONFIG['ADMIN_ID'],
            f"üö® –ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç #{report_id} –æ—Ç @{user.username}",
            reply_markup=get_report_actions(report_id)
        )
    
    await update.message.reply_text(
        "‚úÖ –í–∞—à —Ä–µ–ø–æ—Ä—Ç –ø–æ–ª—É—á–µ–Ω! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_main_keyboard(await is_admin(user.id))
    )
    context.user_data['awaiting_report'] = False

# --- –ê–î–ú–ò–ù-–§–£–ù–ö–¶–ò–ò ---
async def show_admin_panel(update: Update):
    await update.message.reply_text(
        "üëÆ *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*",
        reply_markup=get_admin_keyboard(),
        parse_mode="Markdown"
    )

async def show_reports_list(update: Update):
    open_reports = [r for r in db.data['reports'].values() if r['status'] == 'open']
    
    if not open_reports:
        await update.message.reply_text("üéâ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–ø–æ—Ä—Ç–æ–≤!")
        return
    
    text = "üì® *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç—ã:*\n\n"
    for report in sorted(open_reports, key=lambda x: x['timestamp'], reverse=True)[:5]:
        user = db.data['users'].get(report['user_id'], {})
        text += (
            f"‚ö†Ô∏è *#{report['id']}* –æ—Ç @{user.get('username', 'unknown')}\n"
            f"üìÖ {datetime.fromisoformat(report['timestamp']).strftime('%d.%m %H:%M')}\n\n"
        )
    
    await update.message.reply_text(text, parse_mode="Markdown")

async def show_system_stats(update: Update):
    stats_text = (
        f"üìà *–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(db.data['users'])}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Ä–µ–ø–æ—Ä—Ç–æ–≤: {db.data['stats']['total_reports']}\n"
        f"‚Ä¢ –†–µ—à–µ–Ω–æ —Ä–µ–ø–æ—Ä—Ç–æ–≤: {db.data['stats']['resolved_reports']}\n"
        f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(db.data['banned_users'])}"
    )
    await update.message.reply_text(stats_text, parse_mode="Markdown")

async def show_users_list(update: Update):
    recent_users = sorted(
        db.data['users'].values(),
        key=lambda x: x['last_activity'],
        reverse=True
    )[:5]
    
    text = "üë• *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n\n"
    for user in recent_users:
        text += (
            f"üë§ {user['first_name']} (@{user.get('username', '–Ω–µ—Ç')})\n"
            f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {datetime.fromisoformat(user['last_activity']).strftime('%d.%m %H:%M')}\n\n"
        )
    
    await update.message.reply_text(text, parse_mode="Markdown")

async def show_settings(update: Update):
    await update.message.reply_text(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:*",
        reply_markup=get_settings_keyboard(),
        parse_mode="Markdown"
    )

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ---
async def handle_settings_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if not await is_admin(query.from_user.id):
        return
    
    setting = query.data.split('_')[1]
    
    if setting == "autorespond":
        db.data['settings']['auto_respond'] = not db.data['settings']['auto_respond']
    elif setting == "notifynewusers":
        db.data['settings']['notify_new_users'] = not db.data['settings']['notify_new_users']
    
    db.save()
    await query.edit_message_reply_markup(reply_markup=get_settings_keyboard())

async def handle_report_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if not await is_admin(query.from_user.id):
        return
    
    action, report_id = query.data.split('_')
    report = db.data['reports'].get(report_id)
    
    if not report:
        await query.edit_message_text("‚ùå –†–µ–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if action == "resolve":
        db.data['reports'][report_id]['status'] = 'resolved'
        db.data['stats']['resolved_reports'] += 1
        await query.edit_message_text(f"‚úÖ –†–µ–ø–æ—Ä—Ç #{report_id} –∑–∞–∫—Ä—ã—Ç")
    elif action == "ban":
        user_id = report['user_id']
        db.data['banned_users'][user_id] = datetime.now().isoformat()
        await context.bot.send_message(
            user_id,
            "üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        )
        await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    elif action == "details":
        user = db.data['users'].get(report['user_id'], {})
        details = (
            f"üîç *–î–µ—Ç–∞–ª–∏ —Ä–µ–ø–æ—Ä—Ç–∞ #{report_id}*\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('first_name', 'Unknown')} (@{user.get('username', '–Ω–µ—Ç')})\n"
            f"üìÖ –í—Ä–µ–º—è: {datetime.fromisoformat(report['timestamp']).strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n{report['text']}"
        )
        await query.message.reply_text(details, parse_mode="Markdown")
    elif action == "reply":
        context.user_data['replying_to'] = report_id
        await query.message.reply_text(
            f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–ø–æ—Ä—Ç #{report_id}:",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        )

async def send_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'replying_to' not in context.user_data:
        return
    
    report_id = context.user_data['replying_to']
    report = db.data['reports'].get(str(report_id))
    
    if not report:
        await update.message.reply_text("‚ùå –†–µ–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        await context.bot.send_message(
            report['user_id'],
            f"üì® *–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à —Ä–µ–ø–æ—Ä—Ç #{report_id}:*\n\n{update.message.text}",
            parse_mode="Markdown"
        )
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        db.data['reports'][str(report_id)]['status'] = 'resolved'
        db.data['stats']['resolved_reports'] += 1
        db.save()
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    del context.user_data['replying_to']

# --- –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        return
    
    user = update.effective_user
    await update_user(user)
    
    if str(user.id) in db.data['banned_users']:
        await update.message.reply_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    
    text = update.message.text
    
    if text == "üÜò –ü–æ–º–æ—â—å":
        await show_help(update)
    elif text == "‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç":
        await start_report(update)
    elif text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_user_stats(update)
    elif text == "üëÆ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and await is_admin(user.id):
        await show_admin_panel(update)
    elif text == "üì® –†–µ–ø–æ—Ä—Ç—ã" and await is_admin(user.id):
        await show_reports_list(update)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and await is_admin(user.id):
        await show_system_stats(update)
    elif text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" and await is_admin(user.id):
        await show_users_list(update)
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" and await is_admin(user.id):
        await show_settings(update)
    elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await start(update, context)
    elif context.user_data.get('awaiting_report'):
        await process_report(update, context)
    elif 'replying_to' in context.user_data:
        await send_reply(update, context)

# --- –ó–ê–ü–£–°–ö ---
def main():
    persistence = PicklePersistence(filepath='bot_persistence.pickle')
    application = Application.builder() \
        .token(CONFIG['TOKEN']) \
        .persistence(persistence) \
        .build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
    application.add_handler(CallbackQueryHandler(handle_settings_toggle, pattern="^toggle_"))
    application.add_handler(CallbackQueryHandler(handle_report_action, pattern="^(reply|resolve|ban|details)_"))
    
    # –ó–∞–ø—É—Å–∫
    application.run_polling()

if __name__ == '__main__':
    print("Starting bot...")
    main()
